<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <title><%= title %></title>
    <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    <div id="app">
      <div class="vote_area">
        <div class="vote_title"><%= title %></div>
        <div ref="bar" v-for="index of num" class="one_area">
          <div class="survey_bar" :class="{emphasizeBar: (emphasizedIndex==index-1)}" :style="`height:${bars[index-1]}px;`"></div>
          {{counts[index-1]}}
        </div>
        <br/>
        <div v-for="index of num" class="button_area">
          <button class="survey_button" :class="{survey_button_on: voted==index}" @click.prevent="voteSurvey(index)">{{displays[index-1]}}</button>
        </div>

<!--          <button class="yes_button" :class="{votedYesStyle: votedYes}" :style="`width:${sizeYes}px;height:${sizeYes}px`" @click.prevent="sayYes">Yes<br/>{{countYes}}</button>
        <button class="no_button" :class="{votedNoStyle: votedNo}" :style="`width:${sizeNo}px;height:${sizeNo}px`" @click.prevent="sayNo">No</br>{{countNo}}</button>
-->
      </div>
    </div>
  </body>
  <script>
    const socket = io();
    var app = new Vue({
      el: '#app',
      data: {
        maxh:300,
        title: '<%= title %>',
        num: Number('<%= num %>'),
        counts: [0,0,0,0,0],
        save_total :0,
        displays:['<%= d1 %>','<%= d2 %>','<%= d3 %>','<%= d4 %>','<%= d5 %>'],
        bars:[300,300,300,300,300],
        voted:0,
        errorMessage: '',
        emphasizedIndex:-1,
      },
      mounted() {
        this.resizeBar()
        window.addEventListener('resize',this.resizeBar)

        socket.emit('voting',this.title)
        socket.on('voting',(box)=>{
          if(this.title === box.title){
            this.counts=[Number(box.S1),Number(box.S2),Number(box.S3),Number(box.S4),Number(box.S5)]
            this.save_total = this.counts.reduce(function(sum,element){
              return sum+element;
            },0)
            this.resizeBar()
          }
        })
        socket.on('switch',(url)=>{
          window.location.href=url
        })
        socket.on('emphasize',(emphasizedData)=>{
          if(this.title === emphasizedData.title){
            this.emphasizedIndex = emphasizedData.index
          }
        })
      },
      beforeDestroy(){
        window.removeEventListener('resize',this.resizeBar)
      },
      methods:{
        resizeBar: function(){
          this.maxh = this.$refs.bar[0].clientHeight

          let max_count = this.counts.reduce((a,b)=>Math.max(a,b))
          if(max_count==0)max_count=1
          let adjust = 1.5
          adjust = ( - max_count / 100.0 ) + 1.5
          if(adjust < 1.1) adjust = 1.1
          this.bars = this.counts.map(el=>this.maxh - el*this.maxh/(max_count*adjust))

        },
        voteSurvey: function(index){
          this.vote({title:this.title, vote:"S"+index, type:"SURVEY"})
          this.voted = index
        },
        vote:function(vote){
          fetch("/vote",{
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify(vote)
          })
          .then(response=>{
            //OK
          })
          .catch((error)=>{
            this.errorMessage = error
          });
        },
      }
    })
  </script>
</html>
