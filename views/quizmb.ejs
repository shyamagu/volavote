<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <title><%= title %></title>
    <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    <div id="app">
      <div class="vote_area">
        <div class="vote_title"><%= title %></div>
        <br>
        <div ref="maruZone" class="marubatsu_block" :class="{emphasizeAnswer: (emphasizedIndex==0)}">
          <button class="maru_button" :class="{votedMaruStyle: votedMaru}" :style="`font-size:${this.display_maru_font_size}px;`" @click.prevent="voteMaru">{{display_maru}}</button>
          <div class="marubatsu_count">
            {{countMaru}}
          </div>
        </div>
        <div class="marubatsu_block" :class="{emphasizeAnswer: (emphasizedIndex==1)}">
          <button class="batsu_button" :class="{votedBatsuStyle: votedBatsu}" :style="`font-size:${this.display_batsu_font_size}px;`" @click.prevent="voteBatsu">{{display_batsu}}</button>
          <div class="marubatsu_count">
            {{countBatsu}}
          </div>
        </div>
      </div>
  </div>
  </body>
  <script>
    const socket = io();
    var app = new Vue({
      el: '#app',
      data: {
        title: '<%= title %>',
        display_maru: '<%= maru %>',
        display_batsu: '<%= batsu %>',
        display_maru_font_size: 20,
        display_batsu_font_size:20,
        maru_font_size:20,
        batsu_font_size:20,
        votedMaru:false,
        votedBatsu:false,
        errorMessage: '',
        countMaru:0,
        countBatsu:0,
        emphasizedIndex:-1,
      },
      mounted() {
        this.resizeFont()
        window.addEventListener('resize',this.resizeFont)

        socket.emit('voting',this.title)
        socket.on('voting',(box)=>{
          if(this.title === box.title){
            this.countMaru = box.MARU
            this.countBatsu = box.BATSU
          }
        })
        socket.on('switch',(url)=>{
          window.location.href=url
        })
        socket.on('emphasize',(emphasizedData)=>{
          if(this.title === emphasizedData.title){
            this.emphasizedIndex = emphasizedData.index
          }
        })
      },
      beforeDestroy(){
        window.removeEventListener('resize',this.resizeFont)
      },
      methods:{
        resizeFont: function(){
          let maru_width = this.$refs.maruZone.clientWidth
          let maru_length= this.display_maru.length
          let batsu_length=this.display_batsu.length

          this.display_maru_font_size = maru_width*0.7/maru_length
          this.display_batsu_font_size = maru_width*0.7/batsu_length

          if(this.display_maru_font_size<=50) this.display_maru_font_size = 50
          if(this.display_batsu_font_size<=50) this.display_batsu_font_size = 50

          if(this.display_maru_font_size < this.display_batsu_font_size) this.display_batsu_font_size = this.display_maru_font_size
          if(this.display_batsu_font_size< this.display_maru_font_size)  this.display_maru_font_size = this.display_batsu_font_size
        },
        voteMaru: function(){
          this.vote({title:this.title, vote:"MARU", type:"MBQ"})

          this.votedMaru = true
          this.votedBatsu = false
        },
        voteBatsu: function(){
          this.vote({title:this.title, vote:"BATSU", type:"MBQ"})
          this.votedMaru = false
          this.votedBatsu = true
        },
        vote:function(vote){
          fetch("/vote",{
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify(vote)
          })
          .then(response=>{
            //OK
          })
          .catch((error)=>{
            this.errorMessage = error
          });
        },
      }
    })
  </script>
</html>
