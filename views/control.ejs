<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <title>volavote control page</title>
    <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue-clipboard2@0.3.1/dist/vue-clipboard.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    <div id="app">
      <div class="vote_area">
        <div class="vote_title">volavote control page</div>
        <div class="input_key" v-if="!getControled">KEY: <input id="volavotekey" v-model="authkey" type="password" autocomplete="none"><button @click="getControl">GET CONTROL</button></div>
        <div class="input_key" v-if="getControled">
          <div class="options">
            Anonymous create poll: 
            <input type="radio" id="enable"  v-model="anonymous" value="true" @click="checkAnonymous('true')"><label for="enable">Enable</label>
            <input type="radio" id="disable" v-model="anonymous" value="false" @click="checkAnonymous('false')"><label for="disable">Disable</label>
          </div>
          <div v-if="anonymous=='false'" class="options">
            Require poll CODE:
            <input type="radio" id="enable"  v-model="requireCode" value="true" @click="applyRequireCode()"><label for="enable">Enable</label>
            <input type="radio" id="disable" v-model="requireCode" value="false" @click="disableRequireCode()"><label for="disable">Disable</label>
          </div>
          <div class="code_input" v-if="requireCode == 'true'">
            {{pollCode}}
          </div>
          <br>
          <div class="options">
            <button @click="showResult('all')">Show All(json)</button>
            <button @click="downloadResult('all')">Download All(json)</button>
            <input type="file" ref="file" style="display:none" accept="json" v-on:change="uploadAll()" aria-label="import all"/>
            <button @click="$refs.file.click()">Import All(json)</button>
          </div>
          <div class="options">
            <button @click="showResult('countup')">Show Countup(json)</button>
            <button @click="downloadResult('countup')">Download Countup(json)</button>
          </div>
        </div>
        <div v-if="errorMessage" class="error_message">{{errorMessage}}</div>
      </div>
      <div class="result_area">
        <div v-for="(box,index) in resultBoxes" :key="box.ID">
          <div class="result_line_switch":class="{current_line: box.CURRENT==true}"><button class="switch_button" :class="{current_line: box.CURRENT==true}" @click="switchTo(box.ID,getUrl(box))">{{box.CURRENT? "CURRENT":"SWITCH"}}</button></div>
          <div class="result_line_title" :class="{current_line: box.CURRENT==true}"><a :href="getUrl(box)" target="_blank" rel="noopener noreferrer">{{box.title}}</a></div>
          <div class="result_line_type"  :class="{current_line: box.CURRENT==true}">{{box.TYPE}}</div>
          <div v-if="box.TYPE=='ALT'" class="result_line_result" :class="{current_line: box.CURRENT==true}">
            <span class="emphasize" @click="emphasizeVote(box.title,0)">YES</span>:{{box.YES}},
            <span class="emphasize" @click="emphasizeVote(box.title,1)">NO</span>:{{box.NO}}
          </div>
          <div v-if="box.TYPE=='MBQ'" class="result_line_result" :class="{current_line: box.CURRENT==true}">
            <span class="emphasize" @click="emphasizeVote(box.title,0)">choice1</span>:{{box.MARU}},
            <span class="emphasize" @click="emphasizeVote(box.title,1)">choice2</span>:{{box.BATSU}}
          </div>
          <div v-if="box.TYPE=='SURVEY'" class="result_line_result" :class="{current_line: box.CURRENT==true}">
            <span class="emphasize" @click="emphasizeVote(box.title,0)">S1</span>:{{box.S1}},
            <span class="emphasize" @click="emphasizeVote(box.title,1)">S2</span>:{{box.S2}},
            <span class="emphasize" @click="emphasizeVote(box.title,2)">S3</span>:{{box.S3}},
            <span class="emphasize" @click="emphasizeVote(box.title,3)">S4</span>:{{box.S4}},
            <span class="emphasize" @click="emphasizeVote(box.title,4)">S5</span>:{{box.S5}}
          </div>
          <div v-if="box.TYPE=='MULTI'" class="result_line_result" :class="{current_line: box.CURRENT==true}">
            <span v-for="(key,index) in box.COUNTUP">
              <span class="emphasize" @click="emphasizeVote(box.title,index)">C{{index+1}}:</span>{{key}},
            </span> 
          </div>
          <div v-if="box.TYPE=='MAP'" class="result_line_result" :class="{current_line: box.CURRENT==true}">{{box.MAP.length}} points in MAP</div>
          <div v-if="box.TYPE=='TEXT'" class="result_line_result" :class="{current_line: box.CURRENT==true}">
            {{Object.keys(box.MESSAGES).length}} messages, ->
            <select v-model="emphasizedMessageIndexes[index]" @change="emphasizeVote(box.title,emphasizedMessageIndexes[index]-1)">
              <option v-for="n of Object.keys(box.MESSAGES).length" v-bind:value="n">{{n}}</option>
            </select>
          </div>
          <div class="result_line_copy"><button class="copy_button" v-clipboard:copy="getFullUrl(box)">Copy URL</button></div>
          <div class="result_line_copy"><button class="copy_button" @click="showQR(box.title,box.TYPE,pollCode)">Show QR</button></div>
        </div>
      </div>
      <div v-if="getControled" class="making_area">
        <button v-if="!creatingPoll" class="make_poll_botton_new" @click="startToCreateNewPoll">+</button>
        <div v-if="creatingPoll" class="create_area">
          <div class="make_poll_item">Poll Title</div>
          <div class="make_poll_value">
            <input class="make_poll_input" size=35 v-model="new_title" type="text">
          </div>
          <div class="make_poll_item">Type</div>
          <div class="make_poll_value">
            <select class="make_poll_input" v-model="new_type">
              <option v-for="option in new_type_options" v-bind:value="option.value">
                {{option.text}}
              </option>
            </select>
          </div>
          <div v-if="new_type=='MBQ'">
            <div class="make_poll_item">STYLE</div>
            <div class="make_poll_value">
              <select class="make_poll_input" v-model="new_mbq_displays">
                <option v-for="option in new_mbq_options" v-bind:value="option.value">
                  {{option.text}}
                </option>
              </select>
              or
              <input class="make_poll_input" :style="`width:100px`" v-model="new_mbq_displays[0]" placeholder="ex)YES">
              <input class="make_poll_input" :style="`width:100px`" v-model="new_mbq_displays[1]" placeholder="ex)NO">
            </div>
            <div class="make_poll_item">Image (option)</div>
            <div class="make_poll_value">
              <input class="make_poll_input" v-model="new_mbq_image_url" placeholder="image url *option">
            </div>
          </div>
          <div v-if="new_type=='ALT'">
            <div class="make_poll_item">Image (option)</div>
            <div class="make_poll_value">
              <input class="make_poll_input" v-model="new_alt_image_url" placeholder="image url *option">
            </div>
          </div>
          <div v-if="new_type=='SURVEY'">
            <div class="make_poll_item">Steps</div>
            <div class="make_poll_value">
              <select class="make_poll_input" v-model="new_step_num">
                <option v-for="option in new_step_options" v-bind:value="option.value">
                  {{option.text}}
                </option>
              </select>
            </div>
            <div class="make_poll_item_step">Step Messages</div>
            <div class="make_poll_value" >
              <div class="make_poll_input" v-for="num in new_step_num">
                step {{num}}:<input class="make_poll_input" size=25 v-model=new_step_messages[num-1] type="text">
              </div>
            </div>
          </div>
          <div v-if="new_type=='MULTI'">
            <div class="make_poll_item">Num of choice</div>
            <div class="make_poll_value">
              <input class="make_poll_input_number" type="number" v-model="new_multi_survey_num" />
            </div>
            <div class="make_poll_item_step">Msgs of choice</div>
            <div class="make_poll_value" >
              <div class="make_poll_input" v-for="num of Number(new_multi_survey_num)">
                choice {{num}}:<input class="make_poll_input" size=25 v-model="new_multi_survey_displays[num-1]" type="text">
              </div>
            </div>
            <div class="make_poll_item">Vote style</div>
            <div class="make_poll_value" >
              <input type="radio" id="enable"  v-model="new_multi_constraint" value=""><label for="enable">Multiple</label>
              <input type="radio" id="disable" v-model="new_multi_constraint" value="SINGLE"><label for="disable">Single</label>
            </div>
          </div>
          <div v-if="new_type=='MAP'">
            <div class="make_poll_item">Image</div>
            <div class="make_poll_value">
              <select class="make_poll_input" v-model="new_map_image">
                <option v-for="option in new_map_image_options" v-bind:value="option.value">
                  {{option.text}}
                </option>
              </select>
              or
              <input class="make_poll_input" v-model="new_map_image_url" placeholder="image url">
            </div>
            <div class="make_poll_item">Image width</div>
            <div class="make_poll_value">
              <input class="make_poll_input" type="number" max="1600" min="100" v-model="new_map_image_width">px (100px~500px*~1600px)
            </div>
          </div>
          <div v-if="new_type=='TEXT'">
            <div class="make_poll_item">Constraint</div>
            <div class="make_poll_value">
              <select class="make_poll_input" v-model="new_text_type">
                <option v-for="option in new_text_type_options" v-bind:value="option.value">
                  {{option.text}}
                </option>
              </select>
            </div>
          </div>
          <button class="make_poll_botton_create" @click="createPoll">Create Poll</button>
        </div>
      </div>
    </div>
  </body>
  <script>
    const socket = io();
    const VueClipboard  = window['VueClipboard'];
    const codeString = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"
    Vue.use(VueClipboard)
    var app = new Vue({
      el: '#app',
      data: {
        authkey:"",
        anonymous:"false",
        requireCode:"false",
        resultBoxes:[],
        errorMessage:"",
        new_title:"",
        new_type:"ALT",
        new_type_options:[
          {text: 'YES/NO',value:'ALT'},
          {text: 'Multi-choice',value:'MULTI'},
          {text: '2~5 Step Survey',value:'SURVEY'},
          {text: 'MAP',value:'MAP'},
          {text: 'TEXT',value:'TEXT'},
          {text: '2-choice QUIZ',value:'MBQ'}
        ],
        new_alt_image_url:"",
        new_step_num:5,
        new_step_options:[
          {text: '2',value:2},
          {text: '3',value:3},
          {text: '4',value:4},
          {text: '5',value:5},
        ],
        new_step_messages:[],
        new_map_image:"",
        new_map_image_options:[
          {text: 'World Map', value:"world"},
          {text: 'Japan Map', value:"japan"}
        ],
        new_map_image_url:"",
        new_map_image_width:500,
        new_text_type:"SINGLE",
        new_text_type_options:[
          {text: '1 Person : 1 Message',value:"SINGLE"},
          {text: '1 Person : N Message',value:"MULTI"},
        ],
        new_mbq_options:[
          {text: '',value:""},
          {text: 'o-x', value:["o","x"]},
          {text: 'true-false', value:["true","false"]}
        ],
        new_mbq_displays:[],
        new_mbq_image_url:"",
        new_multi_survey_num:5,
        new_multi_survey_displays:[],
        new_multi_constraint:"",
        getControled:false,
        creatingPoll:false,
        pollCode:"",
        emphasizedMessageIndexes:[],
      },
      mounted() {
        socket.on('voting',(box)=>{
          this.getControl()
        })
      },
      methods:{
        emphasizeVote:function(title,index){
          fetch("/control/emphasize",{
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify({authkey:this.authkey,title:title,index:index})
          })
          .then(response=>response.json())
          .then(data=>{
            if(data.auth==="OK"){
            }else{
              this.errorMessage = "Invalid key"
              this.getControled= false
            }
          })
          .catch(error=>{
            this.errorMessage = error
          })
        },
        checkAnonymous:function(flag){
          if(flag == this.anonymous) return
          if(flag==='true'){
            this.requireCode = 'false'
            this.pollCode = Array.from(Array(6)).map(()=>codeString[Math.floor(Math.random()*codeString.length)]).join('')
          }

          this.errorMessage = ""
          fetch("/control/anonymous",{
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify({authkey:this.authkey,anonymous:(flag==="true")})
          })
          .then(response=>response.json())
          .then(data=>{
            if(data.auth==="OK"){
            }else{
              this.errorMessage = "Invalid key"
              this.getControled= false
            }
          })
          .catch(error=>{
            this.errorMessage = error
          })
        },
        applyRequireCode:function(){
          this.pollCode = Array.from(Array(6)).map(()=>codeString[Math.floor(Math.random()*codeString.length)]).join('')
          this.setRequireCode()
        },
        disableRequireCode:function(){
          this.pollCode = ""
          this.setRequireCode()
        },
        setRequireCode:function(){
          this.errorMessage = ""
          fetch("/control/code",{
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify({authkey:this.authkey,code:this.pollCode})
          })
          .then(response=>response.json())
          .then(data=>{
            if(data.auth==="OK"){
            }else{
              this.errorMessage = "Invalid key"
              this.getControled= false
            }
          })
          .catch(error=>{
            this.errorMessage = error
          })

        },
        startToCreateNewPoll:function(){
          this.creatingPoll = true
        },
        createPoll:function(){
          this.errorMessage = ""
          fetch("/control/create",{
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify({
              authkey:this.authkey,
              title:this.new_title,
              type:this.new_type,
              new_alt_image_url:this.new_alt_image_url,
              num:this.new_step_num,
              ds:this.new_step_messages,
              image:this.new_map_image? this.new_map_image:this.new_map_image_url,
              width:this.new_map_image_width,
              constraint:this.new_text_type,
              quiz2c:this.new_mbq_displays,
              new_mbq_image_url:this.new_mbq_image_url,
              new_multi_survey_num:this.new_multi_survey_num,
              new_multi_survey_displays:this.new_multi_survey_displays,
              new_multi_constraint:this.new_multi_constraint,
            })
          })
          .then(response => response.json())
          .then(data=>{
            if(data.auth === "OK"){
              this.resultBoxes = data.result
              if(this.resultBoxes.length>0){
                this.resultBoxes.sort((a,b)=>a.ID-b.ID)
              }else{
                this.errorMessage="There is No poll"
              }
              this.postCreate();
            }else{
              this.errorMessage = "Invalid key"
              this.getControled = false;
            }
//            socket.emit('voting',this.title)
          })
          .catch(error=>{
            this.errorMessage = error
          })
        },
        getControl: function(){
          this.errorMessage = ""
          fetch("/control/get",{
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify({authkey:this.authkey})
          })
          .then(response => response.json())
          .then(data=>{
            if(data.auth === "OK"){
              this.resultBoxes = data.result
              this.anonymous = data.anonymous
              if(data.code){
                this.pollCode = data.code
                this.requireCode = "true"
              }
              if(this.resultBoxes.length>0){
                this.resultBoxes.sort((a,b)=>a.ID-b.ID)
              }else{
                this.errorMessage="There is No poll"
              }
              this.getControled = true
            }else{
              this.errorMessage = "Invalid key"
              this.getControled = false;
            }
//            socket.emit('voting',this.title)
          })
          .catch(error=>{
            this.getControled = false;
            this.errorMessage = error
          })
        },
        switchTo:function(id,url){
          this.errorMessage = ""
          fetch("/control/switch",{
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify({authkey:this.authkey,url:url,id:id})
          })
          .then(response=>response.json())
          .then(data=>{
            if(data.auth==="OK"){
              this.resultBoxes = data.result
              if(this.resultBoxes.length>0){
                this.resultBoxes.sort((a,b)=>a.ID-b.ID)
              }else{
                this.errorMessage="No poll"
              }
            }else{
              this.errorMessage = "Something wrong"
            }
          })
          .catch(error=>{
            this.errorMessage = error
          })

        },
        getUrl:function(box){
          if(box.TYPE==="ALT"){
            return "/alt?title="+encodeURI(box.title)
          }else if(box.TYPE==="MBQ"){
            return "/mbq?title="+encodeURI(box.title)
          }else if(box.TYPE==="SURVEY"){
            params = ""
            if(box.STEP!=5){ params += "&num="+box.STEP }
            if(box.D1){ params += "&d1="+box.D1 }
            if(box.D2){ params += "&d2="+box.D2 }
            if(box.D3){ params += "&d3="+box.D3 }
            if(box.D4){ params += "&d4="+box.D4 }
            if(box.D5){ params += "&d5="+box.D5 }
            return "/survey?title="+encodeURI(box.title)+params
          }else if(box.TYPE==="MULTI"){
            params = ""
            if(box.NUM) params += "&num=" + box.NUM
            if(box.DS) params += "&ds=" + encodeURI(JSON.stringify(box.DS))
            return "/multi?title="+encodeURI(box.title)+params
          }else if(box.TYPE==="MAP"){
            params = ""
            params += "&image=" + box.IMG
            params += "&width=" + box.IMG_w
            return "/map?title="+encodeURI(box.title)+params
          }else if(box.TYPE==="TEXT"){
            params = ""
            return "/text?title="+encodeURI(box.title)+"&constraint="+box.CONSTRAINT
          }
          return "/"
        },
        getFullUrl:function(box){
          const host = window.location.host
          const protocol = window.location.protocol

          return protocol+"//"+host+this.getUrl(box)
        },
        showQR:function(title,type,code){
          window.open('/control/showqr?title='+title+'&code='+code+'&type='+type,'_blank')
        },
        postCreate:function(){
          this.creatingPoll = false
          this.new_title = ""
          this.new_type  = "ALT"
          this.new_step_num = 5
          this.new_step_messages = []
          this.new_map_image = ""
          this.new_map_image_url = ""
          this.new_map_image_width = 500
          this.new_text_type = "SINGLE"
          this.new_mbq_displays = []
          this.new_multi_survey_num = 5
          this.new_multi_survey_displays = []
          this.new_multi_constraint = ""
          this.new_alt_image_url = ""
          this.new_mbq_image_url = ""
        },
        showResult:function(type){
          if(type==="all"){
            window.open('/control/result?type=all&authkey='+this.authkey,'_blank')
          }else if(type==="countup"){
            window.open('/control/result?type=countup&authkey='+this.authkey,'_blank')
          }
        },
        downloadResult:function(type){
          if(type==="all"){
            fetch("/control/getall",{
              method:'POST',
              headers:{'Content-Type':'application/json'},
              body:JSON.stringify({authkey:this.authkey})
            })
            .then(response=>response.json())
            .then(data=>{
              if(data.auth==="OK"){
                let blob = new Blob([JSON.stringify(data.result)],{type:'application/json'})
                let link = document.createElement('a')
                link.href = window.URL.createObjectURL(blob)
                link.download = 'volavote_allresult_'+Date.now()+'.json'
                link.click()
              }else{
                this.errorMessage = "Invalid key"
              }
            })
            .catch(error=>{
              this.errorMessage = error
            })
          }else if(type==="countup"){
            let blob = new Blob([JSON.stringify(this.resultBoxes)],{type:'application/json'})
            let link = document.createElement('a')
            link.href = window.URL.createObjectURL(blob)
            link.download = 'volavote_countup_'+Date.now()+'.json'
            link.click()
          }
        },
        uploadAll:function(){
          const file = this.$refs.file.files[0]
          if(file){
            const reader = new FileReader();
            reader.onload = e =>{
              let importedJson = JSON.parse(e.target.result)
              fetch("/control/replace",{
              method:'POST',
              headers:{'Content-Type':'application/json'},
              body:JSON.stringify({authkey:this.authkey,box:importedJson})
              })
              .then(response=>response.json())
              .then(data=>{
                if(data.auth==="OK"){
                }else{
                  this.errorMessage = "Invalid key"
                }
              })
              .catch(error=>{
                this.errorMessage = error
              })

            }
            reader.readAsText(file)
          }
        }
      }
    })
  </script>
</html>
